
interrupt12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b3  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a5  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000283  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000325  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012e  00000000  00000000  00001441  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000156f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#define F_CPU 8000000UL
 #include <avr/interrupt.h>
  #include <util/delay.h>

ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTC ^= (1<<PC0);  /* Toggle PORTC PC0 */
  7c:	95 b3       	in	r25, 0x15	; 21
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	89 27       	eor	r24, r25
  82:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f e7       	ldi	r18, 0x7F	; 127
  86:	88 e3       	ldi	r24, 0x38	; 56
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <__vector_1+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <__vector_1+0x28>
  94:	00 00       	nop
	_delay_ms(50);
	
	
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	2f 91       	pop	r18
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRA = 0x07;
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	8a bb       	out	0x1a, r24	; 26
	DDRC = 1<<PC0;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	84 bb       	out	0x14, r24	; 20
	DDRD = 0;
  ae:	11 ba       	out	0x11, r1	; 17
	PORTD = 1<<PD2;
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	82 bb       	out	0x12, r24	; 18
	GICR = 1<<INT0; /* Enable INT0*/
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8b bf       	out	0x3b, r24	; 59
	 MCUCR = 1<<ISC01 | 1<<ISC00; /* Trigger INT0 on rising edge */ 
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	85 bf       	out	0x35, r24	; 53
	 sei();
  bc:	78 94       	sei
    while (1) 
    {
		PORTA = 1<<PA0;
  be:	21 e0       	ldi	r18, 0x01	; 1
		_delay_ms(200);
	    PORTA = 1<<PA1; 
  c0:	92 e0       	ldi	r25, 0x02	; 2
		_delay_ms(200); 
		PORTA = 1<<PA2;
  c2:	84 e0       	ldi	r24, 0x04	; 4
	GICR = 1<<INT0; /* Enable INT0*/
	 MCUCR = 1<<ISC01 | 1<<ISC00; /* Trigger INT0 on rising edge */ 
	 sei();
    while (1) 
    {
		PORTA = 1<<PA0;
  c4:	2b bb       	out	0x1b, r18	; 27
  c6:	3f ef       	ldi	r19, 0xFF	; 255
  c8:	41 ee       	ldi	r20, 0xE1	; 225
  ca:	54 e0       	ldi	r21, 0x04	; 4
  cc:	31 50       	subi	r19, 0x01	; 1
  ce:	40 40       	sbci	r20, 0x00	; 0
  d0:	50 40       	sbci	r21, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x26>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x30>
  d6:	00 00       	nop
		_delay_ms(200);
	    PORTA = 1<<PA1; 
  d8:	9b bb       	out	0x1b, r25	; 27
  da:	3f ef       	ldi	r19, 0xFF	; 255
  dc:	41 ee       	ldi	r20, 0xE1	; 225
  de:	54 e0       	ldi	r21, 0x04	; 4
  e0:	31 50       	subi	r19, 0x01	; 1
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	50 40       	sbci	r21, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x3a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x44>
  ea:	00 00       	nop
		_delay_ms(200); 
		PORTA = 1<<PA2;
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	3f ef       	ldi	r19, 0xFF	; 255
  f0:	41 ee       	ldi	r20, 0xE1	; 225
  f2:	54 e0       	ldi	r21, 0x04	; 4
  f4:	31 50       	subi	r19, 0x01	; 1
  f6:	40 40       	sbci	r20, 0x00	; 0
  f8:	50 40       	sbci	r21, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x4e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x58>
  fe:	00 00       	nop
 100:	e1 cf       	rjmp	.-62     	; 0xc4 <main+0x1e>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
